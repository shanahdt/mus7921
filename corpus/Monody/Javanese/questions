
Marc,

I wrote a little script to translate your Javanese data to Humdrum.
For your records, a copy of the script is appended at the end of
this message, along with a copy of the Humdrum version of the
piece you sent.

Regarding your questions, I've formulated some appropriate commands,
which are given below.  I have to say that I did this in quite a
hurry, so I didn't give much thought to the commands.  In doing a
"real" research project, I'd check the results very carefully.
The results for the various commands given below have the following
assumptions/limitations: (1) for the single work you provided,
(2) repeats expanded as you implied (Buka, Merong, Merong, Umpak, Inggah)
(see the appended Humdrum file), and (3) I've collapsed by
pitch-class (i.e. 2 = 2_ = 2^).  Variants of these assumptions
are easily generated.

====================================================================

>Here are some of the questions I'd like to ask:

>Which tones appear at kenong-strokes?

Here is the appropriate command:

  grep '(' works* | sed 's/[^0-9]//g' | sort | uniq -c | sort -rn

The output for the work you gave me is:

      4	5    (i.e. 4 instances of pitch 5)
      4	2    (also 4 instances of pitch 2)

>Which tones appear at gong-strokes?

Command:

  grep ')' works* | sed 's/[^0-9]//g' | sort | uniq -c | sort -rn

The output for the single work is:

     12	5      (i.e. 12 instances of 5, etc.)
     10	2
      4	6
      3	3

>Which tones appear at the ends of _gatra_s?

  ditto -s = works* | context -n 2 | grep '=$' | sed 's/[^0-9]//g;' | sort | uniq -c | sort -rn

     30	2
     27	6
     24	3
     20	5
     17	1

>How many different _gatra_s are used in the repertory?

  ditto -s = works* | context -e = | rid -GLI | sed 's/[^0-9]//g' | sort | uniq -c | sort -rn

      8	5653      (i.e. 8 instances of 5, 6, 5, 3 -- collapsed by pitch-class)
      7	3333
      6	2165
      5	6532
      5	3532
      5	2356
      5	2332
      4	6332
      3	6666
      3	6535
      3	6221
      3	3556
      3	3216
      3	1226
      3	1221
      3	1111
      2	6616
      2	6336
      2	5665
      2	5655
      2	5612
      2	5332
      2	5323
      2	5116
      2	3565
      2	3212
      2	2665
      2	2553
      2	2353
      2	2331
      2	2321
      2	2126
      2	2121
      2	1332
      2	1112
      1	6661
      1	6553
      1	6335
      1	3665
      1	3561
      1	3356
      1	3223
      1	2225
      1	2116
      1	2
      1	1553

>How many different _gatra_ contours are used in the repertory?  (A _gatra_
>contour is a class of _gatra_s which are identical under transposition.)

  ditto -s = works* | sed -f slendro | xdelta -s = | context -e = | rid -GLId | sed 's/ =//' | sort | uniq -c | sort -rn

     10	0 1 0 -1          i.e. 10 instances of unison, up a step, unison, down step
      9	0 2 0 -1
      8	2 -1 -1 -1
      7	0 -2 0 -1
      7	-1 -1 -1 1
      6	4 0 0 0
      6	2 1 -1 -1
      6	-1 -1 -1 -1
      5	0 1 0 -2
      5	-2 1 1 1
      4	1 1 -1 -1
      4	0 0 0 0
      3	0 1 1 1
      3	0 1 0 1
      3	0 0 0 1
      3	-2 1 -1 -1
      2	0 4 0 -1
      2	0 3 0 2
      2	0 1 -1 0
      2	0 1 -1 -1
      2	0 0 1 -1
      2	0 -1 1 3
      2	-2 1 1 -1
      2	-1 1 1 -1
      2	-1 -1 1 -1
      1	8 0 0 0
      1	3 0 0 0
      1	1 0 0 0
      1	0 0 0 2
      1	0 -3 0 -1
      1	0 -2 0 1
      1	0 -1 0 4
      1	0 -1 0 1
      1	0 -1 0 -1
      1	-2 0 1 1

>NB. A footnote:
>Defining identity under transposition is tricky, since it depends on the
>tuning system.  In slendro these are all equivalent contours:
>
>2321
>3532
>5653
>61^65
>1^2^1^6

In the above processing, a file (dubbed "slendro") is used to deal with
this.  The file contents are:

     /^[^!=*]/s/^(*6^)*$/15/
     /^[^!=*]/s/^(*5^)*$/14/
     /^[^!=*]/s/^(*3^)*$/13/
     /^[^!=*]/s/^(*2^)*$/12/
     /^[^!=*]/s/^(*1^)*$/11/
     /^[^!=*]/s/^(*6)*$/10/
     /^[^!=*]/s/^(*5)*$/9/
     /^[^!=*]/s/^(*3)*$/8/
     /^[^!=*]/s/^(*2)*$/7/
     /^[^!=*]/s/^(*1)*$/6/
     /^[^!=*]/s/^(*6_)*$/5/
     /^[^!=*]/s/^(*5_)*$/4/
     /^[^!=*]/s/^(*3_)*$/3/
     /^[^!=*]/s/^(*2_)*$/2/
     /^[^!=*]/s/^(*1_)*$/1/

>In pelog, the tones 4 and 7 function as exchange tones in certain modes.
>For example, in pelog lima, 4 replaces 3 in certain phrases.  So these
>_gatra_ would all have the same contour:
>
>2321
>2421
>3532
>4542
>5653
>5654
>etc.

Similarly, a file (dubbed "lima") is used to deal with this.  The file
would look like this:

     /^[^!=*]/s/^(*7^)*$/18/
     /^[^!=*]/s/^(*6^)*$/17/
     /^[^!=*]/s/^(*5^)*$/16/
     /^[^!=*]/s/^(*4^)*$/15/
     /^[^!=*]/s/^(*3^)*$/15/
     /^[^!=*]/s/^(*2^)*$/14/
     /^[^!=*]/s/^(*1^)*$/13/
     /^[^!=*]/s/^(*7)*$/12/
     /^[^!=*]/s/^(*6)*$/11/
     /^[^!=*]/s/^(*5)*$/10/
     /^[^!=*]/s/^(*4)*$/9/
     /^[^!=*]/s/^(*3)*$/9/
     /^[^!=*]/s/^(*2)*$/8/
     /^[^!=*]/s/^(*1)*$/7/
     /^[^!=*]/s/^(*7_)*$/6/
     /^[^!=*]/s/^(*6_)*$/5/
     /^[^!=*]/s/^(*5_)*$/4/
     /^[^!=*]/s/^(*4_)*$/3/
     /^[^!=*]/s/^(*3_)*$/3/
     /^[^!=*]/s/^(*2_)*$/2/
     /^[^!=*]/s/^(*1_)*$/1/

>In pelog barang (which uses 7 instead of 1), 4 replaces 5.  So these
>_gatra_ would all have the same contour:
>
>2327
>3532
>3432
>5653
>6765
>72^76

Same general solution.

>End of footnote.

>Are there more rare gatras or gatra contours in pelog than slendro?

Two commands are needed:

  ditto -s = `grep 'slendro' works*` | sed -f slendro | xdelta -s = | context -e = | rid -GLId | sed 's/ =//' | sort | uniq -c | sort -rn

  ditto -s = `grep 'pelog' works*` | sed -f pelog | xdelta -s = | context -e = | rid -GLId | sed 's/ =//' | sort | uniq -c | sort -rn

>Which compositions have gatras or gatra contours that appear in no other
>composition?

Use commands such as the above to identify the various gatras or gatra contours,
and then compare the inventories.  If you want to search for a particular
pattern:

    patt -f pattern.file works*

>Tabulate the use of intervals between successive notes.  Are skips more
>likely to occur between the first and second notes of a _gatra_, or the
>second and third, the third and fourth, or the fourth and the first (of the
>next _gatra_)?  Present statistics for each interval and each position
>within the _gatra_.

The following calculates intervals between the first and second notes of the
gatras:

  ditto -s = works* | sed -f slendro | yank -m = -r 0,1,2 | xdelta -b = | rid -GLId | grep -v []=] | sort | uniq -c | sort -rn

     47	1      (i.e. 47 instances of an ascending step)
     28	-1
     20	0
      9	2
      8	-2
      2	4
      2	3
      1	-3

Here is the same calculation for intervals between the second and third notes of
the gatras:

  ditto -s = works* | sed -f slendro | yank -m = -r 0,2,3 | xdelta -b = | rid -GLId | grep -v []=] | sort | uniq -c | sort -rn

     60	0
     38	-1
     19	1

(If you want we could even calculate the intervals between the first and third notes,
or whatever.)

>Are there any _gatra_ that occur much more frequently at one pitch level
>than at the pitch an octave higher or lower?

Do you want exact octave transpositions or any transposition?

>For each two-_gatra_ phrase in this composition, list all of the
>compositions that also use that phrase.

   ditto -s = works* | context -e = | context -n 2 | rid -GLId | sed 's/[^0-9_^ ]//g' > tempfile
   grep -f tempfile works*

>(Similarly for each four-_gatra_ phrase.)

   ditto -s = works* | context -e = | context -n 4 | rid -GLId | sed 's/[^0-9_^ ]//g' > tempfile
   grep -f tempfile works*


You will find the above commands less mysterious if you read a couple
of pertinent sections in the Humdrum User Guide.  I recommend reading
Chapter 1 (Humdrum: A Brief Tour), Chapter 17 (Creating Inventories),
and Chapter 20 (Strophes, Verses and Repeats).  The chapters are
intentionally short (5-6 pages each).

       http://dactyl.som.ohio-state.edu/Humdrum/guide.toc.html

Best wishes,
David

P.S. You might want to suggest a better name for the pertinent Humdrum
representation other than my concoction of "**Java."

------------------------------------------------------------------------

# 2JAVA
#
# This program translates from Marc Perlman's computer notation
# for Javanese music to a Humdrum **Java representation.
#
# Written by David Huron,  Mon Mar  6 20:12:18 EST 2000
{
if ($0 ~/^$/) next   # Eliminate empty lines.
#                      Identify slendro tuning.
if ($0 ~/slendro/) { print "**Java"; print "*slendro" }
#                      Or pelog tuning.
if ($0 ~/pelog/) { print "**Java"; print "*pelog" }
if ($0 ~/[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]*/)   # Identify sections.
	{
	if (NF == 1) {current_section = $1; n=1; print "*>" $1 n}
	print "!! " $0
	next
	}
gsub("^ *","", $0)      # Eliminate leading spaces.
gsub("    *"," = ", $0) # Transform long spaces to gatra signifier.
for (i=1; i<=NF; i++)
	{
	if ($i == "$") print "*>" current_section "X"
	else if ($i == "|") print "*>" current_section n++
	else print $i
	}
print "="               # Add a gatra signifier to the end of each input line.
}
END	{
	print "*-"      # Add a Humdrum terminator to the end of the output.
	}
#    1-7    pitch names
#    _      lower octave indicator
#    ^      higher octave indicator
#    .      indicates that the preceeding tone is sustained
#    =      indicates the division between 4-beat (gatra) groups
#    )      kenong stroke
#    (      gong
#           kenong (phrase ending with a kenong-stroke)
#           gongan (four-kenong length segment ending with a gong-stroke)
# *slendro  tuning system without 4's or 7's (i.e. 3-5 is a step)
# *pelog    pelog tuning

------------------------------------------------------------------------

Here is what my program did with the file you gave me.  You might
consider checking the result against your original.

!! Gendhing Titipati ketuk 2 kerep minggah 4 slendro nem
**Java
*slendro
*>[Buka,Merong1,Merong2,MerongX,Merong2,Umpak,Inggah]
*>Buka
!! Buka
2_
=
.
3_
5_
6_
=
.
6_
.
1
=
.
2
.
1
=
.
2
.
6_
=
.
3_
.
(5_)
=
*>Merong1
!! Merong
.
6_
5_
.
=
5_
6_
1
2
=
.
3
2
1
=
6_
5_
3_
5_)
=
.
6_
5_
.
=
5_
6_
1
2
=
.
3
2
1
=
6_
5_
3_
5_)
=
2_
3_
5_
6_
=
3_
5_
3_
2_
=
.
.
2_
5_
=
2_
3_
5_
6_)
=
1
1
.
.
=
3
2
1
6_
=
3
3
.
.
=
6
5
3
(2)
=
5
6
5
3
=
2
1
2
1
=
.
.
1
2
=
3
5
3
2)
=
5
6
5
3
=
2
1
2
1
=
.
.
1
2
=
3
5
3
2)
=
.
1
2
6
=
.
.
.
.
=
6
6
1^
6
=
5
3
2
3)
=
.
3
3
3
=
5
6
5
3
=
2
3
5
3
=
2
1
6_
(5_)
=
*>Merong2
3
3
.
.
=
6
5
3
2
=
5
6
5
3
=
2
1
6_
5_)
=
3
3
.
.
=
6
5
3
2
=
5
6
5
3
=
2
1
6_
5_)
=
*>MerongX
2_
3_
5_
6_
=
3_
5_
3_
2_
=
6
6
.
.
=
3
3
5
6)
=
3
5
6
1^
=
6
5
3
5
=
2
3
5
6
=
3
5
3
(2)
=
1^
1^
.
.
=
3^
2^
1^
6
=
3
5
6
5
=
3
2
1
2)
=
1^
1^
.
.
=
3^
2^
1^
6
=
3
5
6
5
=
3
2
1
2)
=
.
1
2
6
=
.
.
.
.
=
6
6
1^
6
=
5
3
2
3)
=
.
3
3
3
=
5
6
5
3
=
2
3
5
3
=
2
1
6_
(5_)
=
*>Umpak
!! Umpak
.
1
.
6_
=
.
3_
.
2_
=
.
5_
.
3_
=
.
5_
.
6_)
=
.
2
.
1
=
.
2
.
6_
=
.
3
.
6
=
.
3
.
(2)
=
*>Inggah
!! Inggah
.
3
.
2
=
.
3
.
1
=
.
2
.
1
=
.
3
.
2)
=
.
3
.
2
=
.
3
.
1
=
.
2
.
1
=
.
3
.
2)
=
.
3
.
2
=
.
1
.
6
=
.
2^
.
1^
=
.
5
.
3)
=
.
5
.
6
=
.
5
.
3
=
.
2
.
3
=
.
6_
.
(5_)
=
.
6_
.
5_
=
.
3
.
2
=
.
3
.
2
=
.
6_
.
5_)
=
.
6_
.
5_
=
.
3
.
2
=
.
3
.
2
=
.
6_
.
5_)
=
.
1
.
6_
=
.
3_
.
2_
=
.
5_
.
3_
=
.
5_
.
6_)
=
.
2
.
1
=
.
2
.
6_
=
.
3
.
6
=
.
3
.
(2)
=
*-
